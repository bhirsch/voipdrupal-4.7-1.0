<?php

/**
 * 
 * This module provides a set of helper functions to get in and out of the playlist_relate database.
 * These commonly used functions can be used to create new playlist modules.  
 *
 **/

// Define an easy to remember name for the path of this module, ex: include_once PLAYLIST_PATH.'/playlist.theme';
define('PLAYLIST_PATH', drupal_get_path('module', 'playlist')); 

//include the theme functions
include_once PLAYLIST_PATH . '/playlist.theme';


/**
 *  Input a parent node id, and return an array of children id's ordered by their weight.         
 **/
function playlist_get_children($parent_id, $type) { 
  $children = array();
  $result = db_query("SELECT child_id FROM {playlist_relate} WHERE parent_id = %d AND type = '%s' ORDER BY weight", $parent_id, $type);
  while($row = db_fetch_object($result)) {
    $children[] .= $row->child_id; 
  }
  return $children;
}


/**
 *  Get parent nodes for a child node, user, or type.
 *  Input a child node id, a playlist type, or user id (or combination of three) and return the resulting parent nodes.
 **/
function playlist_get_parents($param = array(), $order = null) {
  foreach ($param as $key => $value) {
      $prefix = $key == 'uid' ? 'n.' : 'p.';
      $cond[] = $prefix . db_escape_string($key) ." = '%s'";
      $arguments[] = $value;
  }
  $cond = implode(' AND ', $cond); 
  if($order) $order_sql = ' ORDER BY ' . $order; 
  $result = db_query(db_rewrite_sql('SELECT DISTINCT parent_id FROM {playlist_relate} p INNER JOIN {node} n ON n.nid = p.parent_id WHERE ' . $cond . $order_sql), $arguments);
  $parents = array();
  while($row = db_fetch_object($result)) {
    $parents[] .= $row->parent_id;   
  }
  return $parents;  
} 


/**
 *    Adds a new child to a parent id.  It will be automatically assigned the next weight in the list. Returns true if successful.
 *    $stack_bottom = TRUE adds new children to the bottom of a playlist.  If False it adds new chilrden to the top of the playlist.
 **/
function playlist_add_child($child_id, $parent_id, $type, $stack_bottom = TRUE) {
  $weight = playlist_get_next_weight($parent_id);
  $exists = playlist_check(array('type' => $type, 'parent_id' => $parent_id, 'child_id' => $child_id));
  if(!$exists) {
    if(!$stack_bottom) {
      // shift the weight of the current items down one, then add the new child to the top.
      $playlist_items = playlist_get_children($parent_id, $type);
      $first_weight = playlist_get_weight($parent_id, $playlist_items[0]);
      $i = $first_weight + 1;
      foreach ($playlist_items as $child_item) {
        playlist_set_weight($parent_id, $child_item, $i++); 
      }
      $result = db_query("INSERT INTO {playlist_relate} (type, parent_id, child_id, weight) VALUES ('%s', %d, %d, %d)", $type, $parent_id, $child_id, $first_weight);       
    }
    else {
      // add the new child to the bottom of the playlist
      $result = db_query("INSERT INTO {playlist_relate} (type, parent_id, child_id, weight) VALUES ('%s', %d, %d, %d)", $type, $parent_id, $child_id, $weight); 
    }
  }
  return !$exists; // if it doesn't exist, return TRUE saying we added it if successful
}


/**
 *  Delete a child node from a given playlist.  If no parent_id specified, it deletes the child from all playlists.  Returns true if successful.
 */
function playlist_remove_child($child_id, $parent_id = NULL) {
  if(is_numeric($parent_id)) {
    $filter = " AND parent_id = $parent_id"; 
  }
  $result = db_query("DELETE FROM {playlist_relate} WHERE child_id = %d" . $filter, $child_id);
  return db_affected_rows($result);
}


/**
 *  Delete a playlist parent. Returns true if successful.  
 */
function playlist_remove($parent_id) {
  $result = db_query("DELETE FROM {playlist_relate} WHERE parent_id = %d", $parent_id);
  return db_affected_rows($result);
} 


/**
 *  Delete all playlists of a given type. Returns true if successful.
 */
function playlist_remove_by_type($type) {
  $result = db_query("DELETE FROM {playlist_relate} WHERE type = '%s'", $type);
  return db_affected_rows($result);
} 


/**
 *  Swaps the weights of two children in a given playlist. Returns true if successful.
 */
function playlist_swap_weight($parent_id, $child_id1, $child_id2) {
  $weight1 = playlist_get_weight($parent_id, $child_id1);  
  $weight2 = playlist_get_weight($parent_id, $child_id2);
  if(($weight1 > -1) && ($weight2 > -1)) {
    playlist_set_weight($parent_id, $child_id1, $weight2);
    playlist_set_weight($parent_id, $child_id2, $weight1);
    return 1;
  }
  else {
    return 0;
  }
}

/**
 *   Set weight of a playlist item directly.
 **/
function playlist_set_weight($parent_id, $child_id, $weight) {
  $result = db_query("UPDATE {playlist_relate} SET weight = %d WHERE parent_id = %d AND child_id = %d", $weight, $parent_id, $child_id); 
  return db_affected_rows($result);
} 
 

/**
 *   Get current weight of a playlist item.
 **/
function playlist_get_weight($parent_id, $child_id) {
  $weight = db_result(db_query("SELECT weight FROM {playlist_relate} WHERE parent_id = %d AND child_id = %d",$parent_id, $child_id));
  return is_null($weight) ? -1 : $weight;  //we return -1 as a FAIL status code since 0 is used as a weight.
} 

/**
 *   Get next weight in a playlist, used in playlist_add_child. 
 **/
function playlist_get_next_weight($parent_id) {
  $max = db_result(db_query("SELECT MAX(weight) FROM {playlist_relate} WHERE parent_id = %d LIMIT 1", $parent_id));
  return (is_null($max)) ? 0 : ++$max;
}


/**
 *   Check to see if a playlist_relate row already exists, return true or false.
 *   You can specify what you are looking for, a type, a parent_id, a child_id, or a combination.
 *   Example: playlist_check('type' => 'audio_playlist', 'parent_id' => 23, 'child_id' => 54);
 **/
function playlist_check($param = array()) {
  foreach ($param as $key => $value) {
      $cond[] = db_escape_string($key) ." = '%s'";
      $arguments[] = $value;
    }
    $cond = implode(' AND ', $cond); 
    
  $result = db_query("SELECT * FROM {playlist_relate} WHERE " . $cond, $arguments);
  return db_affected_rows($result);  
} 

/**
 *   Return an array of all playlist types in the playlist_relate table
 **/
function playlist_get_types() {
  $result = db_query("SELECT DISTINCT type FROM {playlist_relate}");
  $types = array();
  while($row = db_fetch_object($result)) {
    $types[] .= $row->type;  
  }
  return $types; 
} 


////////////////////////////////////////////////////////////////////////////////////////////////
//
// Drupal Hooks 
//
///////////////////////////////////////////////////////////////////////////////////////////////

function playlist_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      // This description is shown in the listing at admin/modules.
      return t('A module that provides helper functions to create playlists.  This module does not do anything by itself.');
  }
} 

/**
 * Implementation of hook_perm().
 * We have to define a basic permission to "manage playlists" to protect the menu callbacks from being abused.
 */
function playlist_perm() {
  return array('manage playlists');
}

/**
 *  Implementation of hook_menu
 **/
function playlist_menu($may_cache) {
  global $user;

  $items = array();

  if ($may_cache) {
    //AJAX save order
    $items[] = array('path' => 'playlist/ajax/order', 'title' => t('Save playlist order'), //playlist/ajax/order/[playlist_id]
      'callback' => '_playlist_save_order',
      'access' => user_access('manage playlists'),
      'type' => MENU_CALLBACK
    );
    $items[] = array('path' => 'playlist/manage', 'title' => t('manage playlist'), //playlist/manage/[type]/[playlist_id]/[op]/[child_id]
      'callback' => '_playlist_manage',
      'access' => user_access('manage playlists'),
      'type' => MENU_LOCAL_TASK,
    ); 
  }
    $items[] = array(
      'path' => 'playlist/add',  //playlist/add/[type]/[child_id]
      'title' => t("Add or remove item from ".node_get_name(arg(2))."s"),
      'access' => user_access('manage playlists'),
      'callback' => playlist_add_item,
      'type' => MENU_CALLBACK,
    );       
  return $items;
} 


/**
 * Menu callback that saves the order of the audio files.  Depends on javascript functions as well as list output.
 * Called via AJAX
 */
function _playlist_save_order(){
  $parent_id = arg(3);
  $playlist_items = $_REQUEST['list'];
  foreach ($playlist_items as $child_id) {
  	playlist_set_weight($parent_id, (int)$child_id, $i++); 
  }
  drupal_set_message("Your changes have been saved.");
  print theme('status_messages');
}


/**
 *  Menu callback for deleting, adding, and swapping individual playlist items
 *   playlist/manage/[type]/[playlist_id]/[op]/[child_id]/[child_id2]/
 */
function _playlist_manage() {
  global $user;

  $type = arg(2);
  $parent_id = arg(3);
  $op = arg(4);
  $child_id = arg(5);
  $child_id2 = arg(6);
 
  //check to see if the user is allowed to update this playlist
  if(node_access('update', node_load($parent_id), $user->uid)) {
    switch($op) {
    case 'add':
      playlist_add_child($child_id, $parent_id, $type, variable_get($type.'_stack_bottom', 1));
      drupal_set_message(t("Item added to playlist"));    
      drupal_goto($_SERVER["HTTP_REFERER"]);
      break;
    case 'delete':
      playlist_remove_child($child_id, $parent_id);
      drupal_set_message(t("Item deleted from playlist"));
      drupal_goto($_SERVER["HTTP_REFERER"]);
      break;
    case 'swap':
      playlist_swap_weight($parent_id, $child_id, $child_id2);
      drupal_goto($_SERVER["HTTP_REFERER"]);
      break;
    }
  } else {
    drupal_set_message(t('You do not have permission to update this playlist.'));
  }
 
  return;
}


/**
 * Menu callback that renders a form for adding a playlist item to a playlist
 *  //playlist/add/[type]/[child_id]
 */
function playlist_add_item() {
  global $user;

  //check if this playlist node type sent is a real node type
  $type = arg(2);

  if(is_numeric(arg(3))) {
    $child_id = arg(3);
  }

  $create_new = '<ul><li>'. l(t("Create a new " . node_get_name($type)), "node/add/$type") .'</li></ul>';

  //get an array of playlists that a user has created
  $result = db_query("SELECT nid FROM {node} WHERE type = '%s' AND uid = %d ORDER BY title", $type, $user->uid);
  $playlists = array();
  while($row = db_fetch_object($result)) {
    $playlists[] .= $row->nid;
  }
  $selected  = playlist_get_parents(array('child_id' => $child_id)); //get playlists where this item is already added
  $child = node_load($child_id);
  $form['items'] = array('#tree' => TRUE, '#type' => 'fieldset', '#title' => t("Add or remove <b>$child->title</b> from the following ".node_get_name($type)."s:"));
  foreach($playlists as $playlist_id) {
    $playlist_node = node_load($playlist_id);
    //render the checkboxes
    if (node_access('update', $playlist_node, $user->uid)) {
      $checked = in_array($playlist_id, $selected) ? TRUE : FALSE;
      $form['items'][$playlist_id] = array('#type' => 'checkbox', '#title' => l($playlist_node->title, 'node/'.$playlist_node->nid), '#default_value' => $checked, '#required' => FALSE);
    }
  }  

  $form['type'] = array('#type' => 'value', '#value' => $type);
  $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));
  $output = $create_new . drupal_get_form('playlist_add_item', $form);

  return $output;
}


/**
 *  Handle the data submitted by playlist_add_item form
 */
function playlist_add_item_submit($form_id, $form_values) {
  global $user;

  $child_id = arg(3);
  $child = node_load($child_id);
  
  foreach($form_values['items'] as $playlist_id => $value) {
    if($value) {
      playlist_add_child($child_id, $playlist_id, $form_values['type'], variable_get($form_values['type'] . '_stack_bottom', 1));
    } else {
      playlist_remove_child($child_id, $playlist_id) > 0;
    }
  }
  drupal_set_message("Your changes were saved.");
}


