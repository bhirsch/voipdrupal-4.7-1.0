<?php
/*
 +--------------------------------------------------------------------+
 | CiviCRM version 1.4                                                |
 +--------------------------------------------------------------------+
 | Copyright (c) 2005 Donald A. Lobo                                  |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the Affero General Public License Version 1,    |
 | March 2002.                                                        |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the Affero General Public License for more details.            |
 |                                                                    |
 | You should have received a copy of the Affero General Public       |
 | License along with this program; if not, contact the Social Source |
 | Foundation at info[AT]socialsourcefoundation[DOT]org.  If you have |
 | questions about the Affero General Public License or the licensing |
 | of CiviCRM, see the Social Source Foundation CiviCRM license FAQ   |
 | at http://www.openngo.org/faqs/licensing.html                       |
 +--------------------------------------------------------------------+
*/

/**
 * This class handles all SOAP client requests.
 *
 * @package CRM
 * @author Donald A. Lobo <lobo@yahoo.com>
 * @copyright Donald A. Lobo 01/15/2005
 * $Id$
 *
 */

$GLOBALS['_CRM_UTILS_SOAPSERVER']['soap_timeout'] =  0;

require_once 'api/utils.php';
require_once 'api/Contact.php';
require_once 'api/Mailer.php';

class CRM_Utils_SoapServer
{
    /**
     * Number of seconds we should let a soap process idle
     * @static
     */
    
    
    /**
     * Cache the actual UF Class
     */
    var $ufClass;

    /**
     * Class constructor.  This caches the real user framework class locally,
     * so we can use it for authentication and validation.
     *
     * @param  string $uf       The userframework class
     */
     function CRM_Utils_SoapServer() {
        // any external program which call SoapServer is responsible for
        // creating and attaching the session
        $args = func_get_args( );
        $this->ufClass = array_shift( $args );
    }

    /**
     * Simple ping function to test for liveness.
     *
     * @param string $var   The string to be echoed
     * @return string       $var
     * @access public
     */
     function ping($var) {
        $session =& CRM_Core_Session::singleton();
        $key = $session->get('key');
        $session->set( 'key', $var );
        return "PONG: $var ($key)";
    }


    /**
     * Verify a SOAP key
     *
     * @param string $key   The soap key generated by authenticate()
     * @return none
     * @access public
     */
     function verify($key) {
        $session =& CRM_Core_Session::singleton();

        $soap_key = $session->get('soap_key');
        $t = time();
        
        if ( $key !== sha1($soap_key) ) {
            require_once 'PEAR.php'; return PEAR::raiseError('Client', 'Invalid key',null,PEAR_ERROR_RETURN);
        }
        

        if (    $GLOBALS['_CRM_UTILS_SOAPSERVER']['soap_timeout'] && 
                $t > ($session->get('soap_time') + $GLOBALS['_CRM_UTILS_SOAPSERVER']['soap_timeout'])) {
            require_once 'PEAR.php'; return PEAR::raiseError('Client', 'Expired key',null,PEAR_ERROR_RETURN);
        }
        
        /* otherwise, we're ok.  update the timestamp */
        $session->set('soap_time', $t);
    }
    
    /**
     * Authentication wrapper to the UF Class
     *
     * @param string $name      Login name
     * @param string $pass      Password
     * @return string           The SOAP Client key
     * @access public
     * @static
     */
     function authenticate($name, $pass) {
        eval ('$result =& ' . $this->ufClass . '::authenticate($name, $pass);');

        if (empty($result)) {
            require_once 'PEAR.php'; return PEAR::raiseError('Client', 'Invalid login',null,PEAR_ERROR_RETURN);
        }
        
        $session =& CRM_Core_Session::singleton();
        $session->set('soap_key', $result[2]);
        $session->set('soap_time', time());
        
        return sha1($result[2]);
    }

    /*** MAILER API ***/
     function mailer_event_bounce($key, $job, $queue, $hash, $body) {
        $this->verify($key);
        return crm_mailer_event_bounce($job, $queue, $hash, $body);
    }

     function mailer_event_unsubscribe($key, $job, $queue, $hash) {
        $this->verify($key);
        return crm_mailer_event_unsubscribe($job, $queue, $hash);
    }

     function mailer_event_domain_unsubscribe($key, $job, $queue, $hash) {
        $this->verify($key);
        return crm_mailer_event_domain_unsubscribe($job, $queue, $hash);
    }

     function mailer_event_subscribe($key, $email, $domain, $group) {
        $this->verify($key);
        return crm_mailer_event_subscribe($email, $domain, $group);
    }

     function mailer_event_confirm($key, $contact, $subscribe, $hash) {
        $this->verify($key);
        return crm_mailer_event_confirm($contact, $subscribe, $hash);
    }

     function mailer_event_reply($key, $job, $queue, $hash, $body, $rt) {
        $this->verify($key);
        return crm_mailer_event_reply($job, $queue, $hash, $body, $rt);
    }

     function mailer_event_forward($key, $job, $queue, $hash, $email) {
        $this->verify($key);
        return crm_mailer_event_forward($job, $queue, $hash, $email);
    }

     function get_contact($key, $params, $returnProperties) { 
        $this->verify($key); 
        return crm_get_contact( $params, $returnProperties );
    }

}

?>
