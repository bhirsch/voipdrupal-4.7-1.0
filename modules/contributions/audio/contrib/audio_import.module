<?php

// $Id: audio_import.module,v 1.1.2.4 2006/09/01 16:28:16 drewish Exp $

function audio_import_help($section = '') {
  switch ($section) {
    case 'admin/audio_import':
      return t("Import multiple audio files and save them as audio nodes. The files will be moved from their location into the audio module's files directory.");
    case 'admin/help#audio':
      $output  = '<p>'. t("The audio_import module allows users with 'administer audio' permission to import audio files and create audio nodes from them. ") .'</p>';
      return $output;
    case 'admin/modules#description':
      return t('Allows audio module admins to batch import audio files.');
    case 'admin/settings/audio_import':
      return t("Configure the audio import module's settings.");
    default:
      return null;
  }
}

function audio_import_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/audio_import',
      'title' => t('audio import'),
      'callback' => 'audio_import_page',
      'access' => user_access('administer audio'),
      'type' => MENU_NORMAL_ITEM,
    );
  }

  return $items;
}

function audio_import_page() {
  $dirpath = variable_get('audio_import_path', '');

  if (!module_exist('audio')) {
    drupal_set_message(t("The audio module isn't enabled. You'll have to enable it before you can import audio files."), 'error');
    return '';
  }
  if (!file_check_directory($dirpath)) {
    drupal_set_message(t("You need to configure the import directory on the audio import module's <a href='%admin-settings-audio_import'>settings page</a>.", array('%admin-settings-audio_import' => url('admin/settings/audio_import'))), 'error');
    return '';
  }

  // convert the extensions setting into a regex for file scanning
  $extensions = variable_get('audio_import_extensions', 'mp3');
  $extensions = preg_split('/[\s,]+/', $extensions, -1, PREG_SPLIT_NO_EMPTY);
  $filemask = '.*(\.'. implode('|\.', $extensions).')$';

  $options = array();
  $files = file_scan_directory($dirpath, $filemask);
  ksort($files);
  $i = 1;
  foreach ($files as $file) {
    // remove our base path from the filename but keep any sub-directories
    $options[$i++] = substr($file->filename, strlen($dirpath) + 1);
  }
  $form['audio_import_files'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Files'),
    '#options' => $options,
    '#description' => t("Searching for files ending with %extensions in %dirpath. Check the ones you'd like to import.", array('%dirpath' => theme('placeholder', $dirpath), '%extensions' => theme('placeholder', implode(', ', $extensions)))),
  );
  // put a copy of the list into a value so we can compare it to what they
  // submit and not have to worry about files being added or removed.
  $form['file_list'] = array(
    '#type' => 'value', '#value' => $options);
  $form['buttons']['submit'] = array(
    '#type' => 'submit', '#value' => t('Import') );

  return drupal_get_form('audio_import_page', $form);
}

function audio_import_page_submit($form_id, $form_values) {
  $op = isset($_POST['op']) ? $_POST['op'] : '';
  if ($op == t('Import')) {
    $dirpath = variable_get('audio_import_path', '');
    if (file_check_directory($dirpath)) {
      $nodes = array();
      $files = array();
      foreach (array_filter($form_values['audio_import_files']) as $index) {
        $origname = $form_values['file_list'][$index];
        $filename = file_check_location($dirpath .'/'. $origname, $dirpath);
        if ($filename) {
          $node = audio_api_insert($filename);
          if ($node) {
            $nodes[] = check_plain($origname) .' as "'. l($node->title, 'node/'. $node->nid) .'" ['. l(t('edit'), 'node/'. $node->nid .'/edit') .']';
          } else {
            drupal_set_message(t("Error importing %filename.", array('%filename' => $filename)));
          }
        }
      }

      // report back on our progress
      if (count($nodes)) {
        drupal_set_message(t("Successfully imported: ". theme('item_list', $nodes)));
      } else {
        drupal_set_message(t('No audio files were imported.'));
      }
    }
  }
}

function audio_import_settings() {
  $form['audio_import_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Import path'),
    '#default_value' => variable_get('audio_import_path', file_directory_temp() . '/audio/'),
    '#after_build' => array('_audio_import_settings_check_directory'),
    '#description' => t("The directory to import audio nodes from. Drupal will need to have write access to this directory so we can move the file.") .'<br />'
      . t("<strong>Note:</strong> a path begining with a <kbd>/</kbd> indicates the path is relative to the server's root, one starting without specifies a path relative to Drupal's root. I.e. <kbd>/tmp/audio</kbd> would be the temp directory off the root while <kbd>tmp/audio</kbd> would be inside Drupal's directory."),
    '#required' => TRUE,
  );

  $form['audio_import_extensions'] = array(
    '#type' => 'textfield',
    '#title' => t('File extensions'),
    '#default_value' => variable_get('audio_import_extensions', 'mp3'),
    '#description' => t('A comma or space separated list of file extensions to list on the import page.'),
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Checks the existence of the directory specified in $form_element.
 *
 * @param $form_element
 *   The form element containing the name of the directory to check.
 * @see system_check_directory()
 */
function _audio_import_settings_check_directory($form_element) {
  $importDir = $form_element['#value'];
  file_check_directory($importDir, 0, $form_element['#parents'][0]);
  $audioDir = variable_get('audio_file_path', file_directory_path() .'/audio');
  if (realpath($importDir) == realpath($audioDir)) {
    form_set_error($form_element['#parents'][0], t("You can't import from the audio module's directory. The import deletes the files so you'd just be asking for trouble."));
  }
  return $form_element;
}
