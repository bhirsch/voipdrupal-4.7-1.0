<?php
// $Id: audio_attach.module,v 1.1.2.2 2006/08/04 19:54:47 drewish Exp $

/**
 * @file audio_attach.module
 */

/**
 * Implementation of hook_help().
 */
function audio_attach_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      // This description is shown in the listing at admin/modules.
      return t('Allows easy attaching of audio nodes to other content types.');
  }
}

/**
 * implementation of hook_form_alter()
 */
function audio_attach_form_alter($form_id, &$form) {
  // Make a copy of the type to shorten up the code
  $type =  $form['type']['#value'];
  
  if (!isset($form['type']) || $type == 'audio') {
    return;
  }
  $enabled = variable_get('audio_attach_'. $type, 0);
  $getid3_path = variable_get('audio_getid3_path', drupal_get_path('module', 'audio') .'/getid3/getid3/'); 
  switch ($form_id) {
    // checkbox in the node's content type configuration page.
    case $type .'_node_settings':
      if (!module_exist('audio')) {
        drupal_set_message(t('The audio module is not installed.  The audio_attach module will not function without it.'), 'error');
      } elseif (!file_exists($getid3_path .'getid3.php')) {
        drupal_set_message(t('The getID3 library used by the audio module to read and write ID3 tags does not appear to be configured correctly. The site administrator will need to check that it is installed and that the audio module knows its location. The audio_attach.module will not function without it.'), 'error');
      } else {
        $form['workflow']['audio_attach_'. $type] = array(
            '#type' => 'radios',
            '#title' => t('Attach audio files'),
            '#default_value' => $enabled,
            '#options' => array(0 => t('Disabled'), 1 => t('Enabled')),
            '#description' => t('Should this node allows users to upload an audio file?'),
          );
      } 
      break;
   
    // if enabled adjust the form
    case $type .'_node_form':
      if ($enabled == 1) {
        $node = $form['#node'];
        $form['#attributes'] = array("enctype" => "multipart/form-data");

        $form['audio_attach'] = array('#type' => 'fieldset', '#title' => t('Attached audio files'), '#collapsible' => TRUE);
        if ($node->aid) {
          $audio = node_load($node->aid);
          $form['audio_attach']['audio_teaser'] = array('#type' => 'item', '#title' => t('Audio file'), '#value' => theme('audio_teaser', $audio) . " ". l($audio->title, 'node/' . $audio->nid));
        }
        $value = ($node->new_audio) ? '#value' : '#default_value';
        $form['audio_attach']['aid'] = array('#type' => 'hidden' , $value => $node->aid);
        $form['audio_attach']['audio_upload'] = array(
          '#type' => 'file', '#title' => t('Add a new audio file'),
          '#description' => t('Click "Browse..." to select an audio file to upload. <strong>NOTE:</strong> the current PHP configuration limits uploads to %maxsize. ', array('%maxsize' => format_size(audio_get_max_upload_size()))),
          );
        $form['audio_attach']['audio_title'] = array(
          '#type' => 'textfield',
          '#title' => t('audio title'),
          '#default_value' => variable_get('audio_default_title_format', '%title by %artist')
          );
        $form['audio_attach']['audio_publish'] = array(
          '#type' => 'checkbox',
          '#title' => t('Published'),
          '#return_value' => 1,
          '#default_value' => 1,
          '#description' => t('If checked, this audio file will be published to the rest of the site.')
          );        
      }
      break;
  }
}

/**
* Implementation of hook_nodeapi().
*/
function audio_attach_nodeapi(&$node, $op, $teaser, $page) {
  if($node->type == 'audio' || variable_get('audio_attach_'. $node->type, 0) == 0){
    return;
  }
  switch ($op) {
    case 'prepare':
      $audio->title = $_POST['edit']['audio_title'];
      $audio->status = $_POST['edit']['audio_publish'] ? 1 : 0;
      $audio->uid = $node->uid;
      $audio->name = $node->name;
      $audio->created = $node->created;
      $audio->type = 'audio';
      audio_prepare($audio);
      if ($audio->audio_file) {
        node_validate($audio);
        if (!form_get_errors()) {
          $audio = node_submit($audio);
          node_save($audio);
          $node->aid = $audio->nid;
          $node->new_audio = TRUE;
        }
      }
      elseif ($_POST['edit']['aid']) {
        $node->aid = $_POST['edit']['aid'];
      }
       
      break;
    case 'insert':
    case 'update':
      if ($node->aid) {
        db_query("DELETE FROM {audio_attach} WHERE nid=%d", $node->nid);
        db_query("INSERT INTO {audio_attach} (nid, aid) VALUES (%d, %d)", $node->nid, $node->aid);
      }
      break;
    case 'delete':
      db_query("DELETE FROM {audio_attach} WHERE nid=%d", $node->nid);
      break;
    case 'load':
      $aid = db_result(db_query("SELECT aid FROM {audio_attach} WHERE nid=%d", $node->nid));
      return array('aid' => $aid);
     
    // Pass the body and teaser objects to the theme again to add the audio files
    case 'view':
      if($node->aid && function_exists('theme_audio_teaser')){
        $node->body = theme('audio_attach_body', $node);
        if ($teaser){
          $node->teaser = theme('audio_attach_teaser', $node);
        }
      }
  }
}

/**
 * Theme the teaser.
 *
 * Override this in template.php to include a case statement if you want different node types to appear differently.
 * If you have additional audio sizes you defined in audio.module, you can use them by theming this function as well.
 */
function theme_audio_attach_teaser($node){
  theme_add_style(drupal_get_path('module', 'audio_attach') .'/audio_attach.css');
  theme_add_style(drupal_get_path('module','audio') .'/audio.css');
  
  $audio = node_load($node->aid);
  $title= $audio->status ? l($audio->title, 'node/' . $audio->nid) : $audio->title;
  
  $output = '';
  $output .= $node->teaser;
  $output .= '<div class="audio-attach-teaser">';
  $output .= '<div class="audio-attach-title">'. $title. '</div>';
  $output .=  theme('audio_teaser', $audio);
  $output .= '</div>'."\n";
  
  return $output;
}

/**
 * Theme the body
 */
function theme_audio_attach_body($node){
  theme_add_style(drupal_get_path('module', 'audio_attach') .'/audio_attach.css');
  theme_add_style(drupal_get_path('module','audio') .'/audio.css');
  $audio = node_load($node->aid);
  
  $output = '';
  $output .= $node->body;
  $output .= '<div class="audio-attach-body">';
  $output .= theme('audio_display',$audio);
  $output .= '</div>'."\n";
  
  return $output;
}

